import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import {
  useConnect,
  useContractRead,
  usePrepareContractWrite,
  useContractWrite,
} from 'wagmi'
import { ConnectButton } from '@rainbow-me/rainbowkit'

const abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'ecdsaVerifierAddress',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'bytes32',
        name: 'parentMerkleRoot',
        type: 'bytes32',
      },
      {
        indexed: false,
        internalType: 'bytes32',
        name: 'currentMerkleRoot',
        type: 'bytes32',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'blockNumber',
        type: 'uint256',
      },
    ],
    name: 'MerkleRootRecorded',
    type: 'event',
  },
  {
    inputs: [],
    name: 'BATCH_SIZE',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    name: 'canonical',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint16', name: 'index', type: 'uint16' },
      { internalType: 'bytes32', name: 'blockHash', type: 'bytes32' },
      { internalType: 'bytes32', name: 'receiptsRoot', type: 'bytes32' },
      { internalType: 'bytes32[]', name: 'merkleProof', type: 'bytes32[]' },
    ],
    name: 'checkBlockHash',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint16', name: 'index', type: 'uint16' },
      { internalType: 'bytes32', name: 'blockHash', type: 'bytes32' },
      { internalType: 'bytes32', name: 'receiptsRoot', type: 'bytes32' },
      { internalType: 'bytes32[]', name: 'merkleProof', type: 'bytes32[]' },
    ],
    name: 'checkBlockHash2',
    outputs: [
      { internalType: 'bytes32', name: '', type: 'bytes32' },
      { internalType: 'bytes32', name: '', type: 'bytes32' },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ecdsaVerifier',
    outputs: [
      { internalType: 'contract IEcdsaVerifier', name: '', type: 'address' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'genesisBlockNumber',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getHighestBlockInfo',
    outputs: [
      {
        components: [
          { internalType: 'uint256', name: 'index', type: 'uint256' },
          { internalType: 'uint256', name: 'blockNumber', type: 'uint256' },
          { internalType: 'uint256', name: 'totalDifficulty', type: 'uint256' },
        ],
        internalType: 'struct BSCBlockUpdaterBatch.MerkleRootInfo',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'irreversibleSize',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    name: 'merkleRoots',
    outputs: [
      { internalType: 'uint256', name: 'index', type: 'uint256' },
      { internalType: 'uint256', name: 'blockNumber', type: 'uint256' },
      { internalType: 'uint256', name: 'totalDifficulty', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256[2]', name: 'a', type: 'uint256[2]' },
      { internalType: 'uint256[2][2]', name: 'b', type: 'uint256[2][2]' },
      { internalType: 'uint256[2]', name: 'c', type: 'uint256[2]' },
      { internalType: 'uint256[8]', name: 'inputs', type: 'uint256[8]' },
    ],
    name: 'updateBlock',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

export default function Home() {
  const { connect, connectors, error, isLoading, pendingConnector } =
    useConnect()
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />

        <Read />
        <div>
          <Write />
        </div>
      </main>
    </div>
  )
}

function Read() {
  const { data, isError, isLoading } = useContractRead({
    addressOrName: '0xA566e0Ae5D449155759386F0254EC080f3F421B6',
    contractInterface: abi,
    functionName: 'BATCH_SIZE',
  })
  if (isLoading) {
    return <div>{isLoading ? 'loading' : null}</div>
  }
  return data.toNumber()
}

function Write() {
  const { config } = usePrepareContractWrite({
    addressOrName: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',
    contractInterface: ['function approve(address, uint256)'],
    functionName: 'approve',
    args: ['0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 1],
  })
  const { write, error } = useContractWrite(config)
  console.log(error)
  return (
    <button disabled={!write} onClick={() => write?.(1, 2)}>
      Write
    </button>
  )
}
